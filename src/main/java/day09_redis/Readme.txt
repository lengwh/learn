一.五大数据类型
1.String
2.Hash(哈希) 类似于java中Map<String,Object>
3.List(列表)
4.Set 不重复
5.Sorted Set 有序

好处：
从高性能，高并发角度
分布式缓存，各实例共享一份数据

二.线程模型(单线程模型)

内部使用了文件事件处理器，采用IO多路复用机制同时监听多个socket

三.redis内存淘汰机制


四.持久化机制
RDF:redis database  指定的时间间隔内，将内存中的数据做快照写入磁盘
                   场景：如果需要进行大规模数据的恢复，且对于数据的完整性不是非常敏感，那rdb就比aof高效，
                        但有可能会丢失最后一份数据
AOF:append only file AOF采用文件追加方式，文件会越来越大为避免出现此种情况，
                    新增了重写机制当AOF文件的大小超过所设定的阈值时，Redis就会启动AOF文件的内容压缩
                    场景：数据完整性好，但aof运行效率要慢于rdb,每秒同步策略效率较好，不同步效率和rdb相同


RDB的数据不实时，同时使用两者时服务器重启也只会找AOF文件。那要不要只使用AOF呢？
作者建议不要，因为RDB更适合用于备份数据库(AOF在不断变化不好备份)，
快速重启，而且不会有AOF可能潜在的bug，留着作为一个万一的手段。


五.事务

六.缓存雪崩  ：事前：提高高可用，选择合适的淘汰策略
             事中：本地缓存+ hystrix限流
             事后：采用redis持久化机制尽快恢复


   缓存穿透：大量请求的key不在redis中，
            写个临时缓存
            布隆过滤器



